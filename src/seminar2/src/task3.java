package seminar2.src;/*–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìî –ó–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏:
–ê–Ω–Ω–∞=4
–ï–ª–µ–Ω–∞=5
–ú–∞—Ä–∏–Ω–∞=6
–í–ª–∞–¥–∏–º–∏—Ä=?
–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω=?
–ò–≤–∞–Ω=4
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (–ª–∏–±–æ HashMap).
–í –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö.
–ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ?, –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ.
–ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —á–∏—Å–ª–∞ –∏–ª–∏ ?, –±—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ ?.*/

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class task3 {
    public static void main(String[] args) {

        File file = new File("/Users/veranikalis/Desktop/exceptions3/seminar2/src/data.txt");
        try {
            if (!file.exists()) {
                file.createNewFile();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String[][] data = readDataFromFile(file);
        replaceQuestionMarks(data);
        writeDataToFile(file, data);
    }

    private static void writeDataToFile(File file, String[][] data) {
        try (FileWriter writer = new FileWriter(file)) {
            for (String[] row : data) {
                for (String cell : row) {
                    writer.write(cell + " ");
                }
                writer.write("\n");
            }
        } catch (IOException e) {
            throw new RuntimeException("Error writing to file", e);
        }
    }

    private static void replaceQuestionMarks(String[][] data) {
        for (int i = 0; i < data.length; i++) {
            String name = data[i][0];
            String value = data[i][1];

            if (value.equals("?")) {
                // –ó–∞–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ "?" –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ –∏–º–µ–Ω–∏
                data[i][1] = String.valueOf(name.length());
            } else {
                try {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                    Integer.parseInt(value);
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("Invalid value '" + value + "' for " + name);
                }
            }
        }
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    private static String[][] readDataFromFile(File file) {
        List<String[]> dataList = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("=");
                if (parts.length != 2) {
                    throw new IllegalArgumentException("Invalid format in line: " + line);
                }
                dataList.add(parts);
            }
        } catch (IOException e) {
            throw new RuntimeException("Error reading from file", e);
        }

        return dataList.toArray(new String[0][0]);
    }
}